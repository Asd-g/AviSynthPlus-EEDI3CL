static const char* interpolation_kernels_source =
"                                                                                                                                                                                                    \n"
"// NOTE: The sampler is defined in the main EEDI3CL.cl file and is available here.                                                                                                                  \n"
"                                                                                                                                                                                                    \n"
"#define TILE_DIM 16                                                                                                                                                                                 \n"
"                                                                                                                                                                                                    \n"
"__kernel __attribute__((reqd_work_group_size(TILE_DIM, TILE_DIM, 1)))                                                                                                                               \n"
"void transpose_u8(__global const uchar* src, __global uchar* dst, const int width, const int height, const int src_stride, const int dst_stride) {                                                  \n"
"    __local uchar tile[TILE_DIM][TILE_DIM + 1];                                                                                                                                                     \n"
"    const int block_x = get_group_id(0) * TILE_DIM;                                                                                                                                                 \n"
"    const int block_y = get_group_id(1) * TILE_DIM;                                                                                                                                                 \n"
"    const int local_x = get_local_id(0);                                                                                                                                                            \n"
"    const int local_y = get_local_id(1);                                                                                                                                                            \n"
"    const int load_x = block_x + local_x;                                                                                                                                                           \n"
"    const int load_y = block_y + local_y;                                                                                                                                                           \n"
"    if (load_x < width && load_y < height)                                                                                                                                                          \n"
"        tile[local_y][local_x] = src[load_y * src_stride + load_x];                                                                                                                                 \n"
"    barrier(CLK_LOCAL_MEM_FENCE);                                                                                                                                                                   \n"
"    const int store_x = block_y + local_x;                                                                                                                                                          \n"
"    const int store_y = block_x + local_y;                                                                                                                                                          \n"
"    if (store_x < height && store_y < width)                                                                                                                                                        \n"
"        dst[store_y * dst_stride + store_x] = tile[local_x][local_y];                                                                                                                               \n"
"}                                                                                                                                                                                                   \n"
"                                                                                                                                                                                                    \n"
"__kernel __attribute__((reqd_work_group_size(TILE_DIM, TILE_DIM, 1)))                                                                                                                               \n"
"void transpose_u16(__global const ushort* src, __global ushort* dst, const int width, const int height, const int src_stride, const int dst_stride) {                                               \n"
"    __local ushort tile[TILE_DIM][TILE_DIM + 1];                                                                                                                                                    \n"
"    const int block_x = get_group_id(0) * TILE_DIM;                                                                                                                                                 \n"
"    const int block_y = get_group_id(1) * TILE_DIM;                                                                                                                                                 \n"
"    const int local_x = get_local_id(0);                                                                                                                                                            \n"
"    const int local_y = get_local_id(1);                                                                                                                                                            \n"
"    const int load_x = block_x + local_x;                                                                                                                                                           \n"
"    const int load_y = block_y + local_y;                                                                                                                                                           \n"
"    if (load_x < width && load_y < height)                                                                                                                                                          \n"
"        tile[local_y][local_x] = src[load_y * src_stride + load_x];                                                                                                                                 \n"
"    barrier(CLK_LOCAL_MEM_FENCE);                                                                                                                                                                   \n"
"    const int store_x = block_y + local_x;                                                                                                                                                          \n"
"    const int store_y = block_x + local_y;                                                                                                                                                          \n"
"    if (store_x < height && store_y < width)                                                                                                                                                        \n"
"        dst[store_y * dst_stride + store_x] = tile[local_x][local_y];                                                                                                                               \n"
"}                                                                                                                                                                                                   \n"
"                                                                                                                                                                                                    \n"
"__kernel __attribute__((reqd_work_group_size(TILE_DIM, TILE_DIM, 1)))                                                                                                                               \n"
"void transpose_f32(__global const float* src, __global float* dst, const int width, const int height, const int src_stride, const int dst_stride) {                                                 \n"
"    __local float tile[TILE_DIM][TILE_DIM + 1];                                                                                                                                                     \n"
"    const int block_x = get_group_id(0) * TILE_DIM;                                                                                                                                                 \n"
"    const int block_y = get_group_id(1) * TILE_DIM;                                                                                                                                                 \n"
"    const int local_x = get_local_id(0);                                                                                                                                                            \n"
"    const int local_y = get_local_id(1);                                                                                                                                                            \n"
"    const int load_x = block_x + local_x;                                                                                                                                                           \n"
"    const int load_y = block_y + local_y;                                                                                                                                                           \n"
"    if (load_x < width && load_y < height)                                                                                                                                                          \n"
"        tile[local_y][local_x] = src[load_y * src_stride + load_x];                                                                                                                                 \n"
"    barrier(CLK_LOCAL_MEM_FENCE);                                                                                                                                                                   \n"
"    const int store_x = block_y + local_x;                                                                                                                                                          \n"
"    const int store_y = block_x + local_y;                                                                                                                                                          \n"
"    if (store_x < height && store_y < width)                                                                                                                                                        \n"
"        dst[store_y * dst_stride + store_x] = tile[local_x][local_y];                                                                                                                               \n"
"}                                                                                                                                                                                                   \n"
"                                                                                                                                                                                                    \n"
"// Common interpolation logic for integer and float types                                                                                                                                           \n"
"float do_cubic_interp(float p0, float p1, float p2, float p3) {                                                                                                                                     \n"
"    return fma(0.5625f, (p1 + p2), -0.0625f * (p0 + p3));                                                                                                                                           \n"
"}                                                                                                                                                                                                   \n"
"                                                                                                                                                                                                    \n"
"float do_linear_interp(float p1, float p2) {                                                                                                                                                        \n"
"    return (p1 + p2) * 0.5f;                                                                                                                                                                        \n"
"}                                                                                                                                                                                                   \n"
"                                                                                                                                                                                                    \n"
"// Kernel to apply interpolation based on pre-calculated paths                                                                                                                                      \n"
"__kernel void applyInterpolation_uint(__read_only image2d_t src, __write_only image2d_t dst, __global const int* fpath, __global int* dmap,                                                         \n"
"                                      const int width, const int height, const int field, const int ucubic, const int dh, const int peak) {                                                         \n"
"    const int x = get_global_id(0);                                                                                                                                                                 \n"
"    const int y_half = get_global_id(1);                                                                                                                                                            \n"
"                                                                                                                                                                                                    \n"
"    if (x >= width || y_half >= height / 2) return;                                                                                                                                                 \n"
"                                                                                                                                                                                                    \n"
"    const int y_interpolated = y_half * 2 + field;                                                                                                                                                  \n"
"    const int dir = fpath[y_half * width + x];                                                                                                                                                      \n"
"    const int dir3 = dir * 3;                                                                                                                                                                       \n"
"    const int abs_dir3 = abs(dir3);                                                                                                                                                                 \n"
"                                                                                                                                                                                                    \n"
"    const int src_y_center = y_interpolated + 4;                                                                                                                                                    \n"
"    const int src_x_center = x + 12;                                                                                                                                                                \n"
"                                                                                                                                                                                                    \n"
"    float result;                                                                                                                                                                                   \n"
"    if (ucubic != 0 && x >= abs_dir3 && x < width - abs_dir3) {                                                                                                                                     \n"
"        float p0 = read_imageui(src, sampler, (int2)(src_x_center + dir3, src_y_center - 3)).x;                                                                                                     \n"
"        float p1 = read_imageui(src, sampler, (int2)(src_x_center + dir, src_y_center - 1)).x;                                                                                                      \n"
"        float p2 = read_imageui(src, sampler, (int2)(src_x_center - dir, src_y_center + 1)).x;                                                                                                      \n"
"        float p3 = read_imageui(src, sampler, (int2)(src_x_center - dir3, src_y_center + 3)).x;                                                                                                     \n"
"        result = do_cubic_interp(p0, p1, p2, p3);                                                                                                                                                   \n"
"    } else {                                                                                                                                                                                        \n"
"        float p1 = read_imageui(src, sampler, (int2)(src_x_center + dir, src_y_center - 1)).x;                                                                                                      \n"
"        float p2 = read_imageui(src, sampler, (int2)(src_x_center - dir, src_y_center + 1)).x;                                                                                                      \n"
"        result = do_linear_interp(p1, p2);                                                                                                                                                          \n"
"    }                                                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    uint final_pixel = convert_uint_sat(clamp(result, 0.f, (float)peak) + 0.5f);                                                                                                                    \n"
"    write_imageui(dst, (int2)(x, y_interpolated), final_pixel);                                                                                                                                     \n"
"    dmap[y_interpolated * width + x] = dir;                                                                                                                                                         \n"
"                                                                                                                                                                                                    \n"
"    const int y_original = y_half * 2 + (1 - field);                                                                                                                                                \n"
"    uint existing_pixel;                                                                                                                                                                            \n"
"    if (dh == 0) {                                                                                                                                                                                  \n"
"        existing_pixel = read_imageui(src, sampler, (int2)(src_x_center, src_y_center + (1 - 2 * field))).x;                                                                                        \n"
"    } else {                                                                                                                                                                                        \n"
"        existing_pixel = read_imageui(src, sampler, (int2)(src_x_center, y_original + 4)).x;                                                                                                        \n"
"    }                                                                                                                                                                                               \n"
"    write_imageui(dst, (int2)(x, y_original), existing_pixel);                                                                                                                                      \n"
"    dmap[y_original * width + x] = 0;                                                                                                                                                               \n"
"}                                                                                                                                                                                                   \n"
"                                                                                                                                                                                                    \n"
"__kernel void applyInterpolation_float(__read_only image2d_t src, __write_only image2d_t dst, __global const int* fpath, __global int* dmap,                                                        \n"
"                                       const int width, const int height, const int field, const int ucubic, const int dh, const int peak) {                                                        \n"
"    const int x = get_global_id(0);                                                                                                                                                                 \n"
"    const int y_half = get_global_id(1);                                                                                                                                                            \n"
"                                                                                                                                                                                                    \n"
"    const float min_value = (peak == 0) ? -0.5f : 0.0f;                                                                                                                                             \n"
"    const float max_value = (peak == 0) ? 0.5f : 1.0f;                                                                                                                                              \n"
"                                                                                                                                                                                                    \n"
"    if (x >= width || y_half >= height / 2) return;                                                                                                                                                 \n"
"                                                                                                                                                                                                    \n"
"    const int y_interpolated = y_half * 2 + field;                                                                                                                                                  \n"
"    const int dir = fpath[y_half * width + x];                                                                                                                                                      \n"
"    const int dir3 = dir * 3;                                                                                                                                                                       \n"
"    const int abs_dir3 = abs(dir3);                                                                                                                                                                 \n"
"                                                                                                                                                                                                    \n"
"    const int src_y_center = y_interpolated + 4;                                                                                                                                                    \n"
"    const int src_x_center = x + 12;                                                                                                                                                                \n"
"                                                                                                                                                                                                    \n"
"    float result;                                                                                                                                                                                   \n"
"    if (ucubic != 0 && x >= abs_dir3 && x < width - abs_dir3) {                                                                                                                                     \n"
"        float p0 = read_imagef(src, sampler, (int2)(src_x_center + dir3, src_y_center - 3)).x;                                                                                                      \n"
"        float p1 = read_imagef(src, sampler, (int2)(src_x_center + dir, src_y_center - 1)).x;                                                                                                       \n"
"        float p2 = read_imagef(src, sampler, (int2)(src_x_center - dir, src_y_center + 1)).x;                                                                                                       \n"
"        float p3 = read_imagef(src, sampler, (int2)(src_x_center - dir3, src_y_center + 3)).x;                                                                                                      \n"
"        result = do_cubic_interp(p0, p1, p2, p3);                                                                                                                                                   \n"
"    } else {                                                                                                                                                                                        \n"
"        float p1 = read_imagef(src, sampler, (int2)(src_x_center + dir, src_y_center - 1)).x;                                                                                                       \n"
"        float p2 = read_imagef(src, sampler, (int2)(src_x_center - dir, src_y_center + 1)).x;                                                                                                       \n"
"        result = do_linear_interp(p1, p2);                                                                                                                                                          \n"
"    }                                                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    write_imagef(dst, (int2)(x, y_interpolated), clamp(result, min_value, max_value));                                                                                                              \n"
"    dmap[y_interpolated * width + x] = dir;                                                                                                                                                         \n"
"                                                                                                                                                                                                    \n"
"    const int y_original = y_half * 2 + (1 - field);                                                                                                                                                \n"
"    float existing_pixel;                                                                                                                                                                           \n"
"    if (dh == 0) {                                                                                                                                                                                  \n"
"        existing_pixel = read_imagef(src, sampler, (int2)(src_x_center, src_y_center + (1 - 2 * field))).x;                                                                                         \n"
"    } else {                                                                                                                                                                                        \n"
"        existing_pixel = read_imagef(src, sampler, (int2)(src_x_center, y_original + 4)).x;                                                                                                         \n"
"    }                                                                                                                                                                                               \n"
"    write_imagef(dst, (int2)(x, y_original), clamp(existing_pixel, min_value, max_value));                                                                                                          \n"
"    dmap[y_original * width + x] = 0;                                                                                                                                                               \n"
"}                                                                                                                                                                                                   \n"
"                                                                                                                                                                                                    \n"
"// vCheck kernels                                                                                                                                                                                   \n"
"__kernel void vCheck_uint(__read_only image2d_t src, __read_only image2d_t dst_in, __write_only image2d_t dst_out, __global const int* dmap, __global const uchar* sclip, const int use_sclip,      \n"
"                          const int width, const int height, const int sclip_stride, const int field, const int vcheck,                                                                             \n"
"                          const float vthresh2, const float rcpVthresh0, const float rcpVthresh1, const float rcpVthresh2, const int peak) {                                                        \n"
"    const int x = get_global_id(0);                                                                                                                                                                 \n"
"    const int y_half = get_global_id(1);                                                                                                                                                            \n"
"                                                                                                                                                                                                    \n"
"    if (x >= width || y_half >= height / 2) return;                                                                                                                                                 \n"
"                                                                                                                                                                                                    \n"
"    const int y_other = y_half * 2 + (1 - field);                                                                                                                                                   \n"
"    write_imageui(dst_out, (int2)(x, y_other), read_imageui(dst_in, sampler, (int2)(x, y_other)));                                                                                                  \n"
"                                                                                                                                                                                                    \n"
"    const int y = y_half * 2 + field;                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    if (y < 2 || y >= height - 2) {                                                                                                                                                                 \n"
"        write_imageui(dst_out, (int2)(x, y), read_imageui(dst_in, sampler, (int2)(x, y)));                                                                                                          \n"
"        return;                                                                                                                                                                                     \n"
"    }                                                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    const int dirc = dmap[y * width + x];                                                                                                                                                           \n"
"    if (dirc == 0) {                                                                                                                                                                                \n"
"        write_imageui(dst_out, (int2)(x, y), read_imageui(dst_in, sampler, (int2)(x, y)));                                                                                                          \n"
"        return;                                                                                                                                                                                     \n"
"    }                                                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    const int dirt = dmap[(y - 2) * width + x];                                                                                                                                                     \n"
"    const int dirb = dmap[(y + 2) * width + x];                                                                                                                                                     \n"
"                                                                                                                                                                                                    \n"
"    float dstp_c = read_imageui(dst_in, sampler, (int2)(x, y)).x;                                                                                                                                   \n"
"    float dstp_1p = read_imageui(dst_in, sampler, (int2)(x, y - 1)).x;                                                                                                                              \n"
"    float dstp_1n = read_imageui(dst_in, sampler, (int2)(x, y + 1)).x;                                                                                                                              \n"
"                                                                                                                                                                                                    \n"
"    float cint;                                                                                                                                                                                     \n"
"    if (use_sclip != 0) {                                                                                                                                                                           \n"
"        const int sclip_bpp_approx = sclip_stride / width;                                                                                                                                          \n"
"        if (sclip_bpp_approx < 2) { /* BPP = 1 */                                                                                                                                                   \n"
"            cint = sclip[y * sclip_stride + x];                                                                                                                                                     \n"
"        } else { /* BPP = 2 */                                                                                                                                                                      \n"
"            cint = ((__global ushort*)sclip)[y * (sclip_stride / 2) + x];                                                                                                                           \n"
"        }                                                                                                                                                                                           \n"
"    } else {                                                                                                                                                                                        \n"
"        const int src_y_center = y + 4;                                                                                                                                                             \n"
"        const int src_x_center = x + 12;                                                                                                                                                            \n"
"        float src_3p = read_imageui(src, sampler, (int2)(src_x_center, src_y_center - 3)).x;                                                                                                        \n"
"        float src_3n = read_imageui(src, sampler, (int2)(src_x_center, src_y_center + 3)).x;                                                                                                        \n"
"        cint = do_cubic_interp(src_3p, dstp_1p, dstp_1n, src_3n);                                                                                                                                   \n"
"    }                                                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    if (max(dirc * dirt, dirc * dirb) < 0 || (dirt == dirb && dirt == 0)) {                                                                                                                         \n"
"        write_imageui(dst_out, (int2)(x, y), convert_uint_sat(clamp(cint, 0.f, (float)peak) + 0.5f));                                                                                               \n"
"        return;                                                                                                                                                                                     \n"
"    }                                                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    float dstp_2p_d = read_imageui(dst_in, sampler, (int2)(x + dirc, y - 2)).x;                                                                                                                     \n"
"    float dstp_c_d = read_imageui(dst_in, sampler, (int2)(x - dirc, y)).x;                                                                                                                          \n"
"    float it = do_linear_interp(dstp_2p_d, dstp_c_d);                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    float dstp_c_d2 = read_imageui(dst_in, sampler, (int2)(x + dirc, y)).x;                                                                                                                         \n"
"    float dstp_2n_d = read_imageui(dst_in, sampler, (int2)(x - dirc, y + 2)).x;                                                                                                                     \n"
"    float ib = do_linear_interp(dstp_c_d2, dstp_2n_d);                                                                                                                                              \n"
"                                                                                                                                                                                                    \n"
"    float dstp_1p_d = read_imageui(dst_in, sampler, (int2)(x + dirc, y - 1)).x;                                                                                                                     \n"
"    float dstp_1n_d = read_imageui(dst_in, sampler, (int2)(x - dirc, y + 1)).x;                                                                                                                     \n"
"                                                                                                                                                                                                    \n"
"    float vt = fabs(dstp_2p_d - dstp_1p_d) + fabs(dstp_c_d2 - dstp_1p_d);                                                                                                                           \n"
"    float vb = fabs(dstp_2n_d - dstp_1n_d) + fabs(dstp_c_d - dstp_1n_d);                                                                                                                            \n"
"    float vc = fabs(dstp_c - dstp_1p) + fabs(dstp_c - dstp_1n);                                                                                                                                     \n"
"                                                                                                                                                                                                    \n"
"    float d0 = fabs(it - dstp_1p);                                                                                                                                                                  \n"
"    float d1 = fabs(ib - dstp_1n);                                                                                                                                                                  \n"
"    float d2 = fabs(vt - vc);                                                                                                                                                                       \n"
"    float d3 = fabs(vb - vc);                                                                                                                                                                       \n"
"                                                                                                                                                                                                    \n"
"    float mdiff0 = (vcheck == 1) ? fmin(d0, d1) : (vcheck == 2 ? (d0 + d1) * 0.5f : fmax(d0, d1));                                                                                                  \n"
"    float mdiff1 = (vcheck == 1) ? fmin(d2, d3) : (vcheck == 2 ? (d2 + d3) * 0.5f : fmax(d2, d3));                                                                                                  \n"
"                                                                                                                                                                                                    \n"
"    float a0 = mdiff0 * rcpVthresh0;                                                                                                                                                                \n"
"    float a1 = mdiff1 * rcpVthresh1;                                                                                                                                                                \n"
"    float a2 = fmax((vthresh2 - abs(dirc)) * rcpVthresh2, 0.0f);                                                                                                                                    \n"
"    float a = clamp(fmax(fmax(a0, a1), a2), 0.0f, 1.0f);                                                                                                                                            \n"
"                                                                                                                                                                                                    \n"
"    float final_pixel = mix(dstp_c, cint, a);                                                                                                                                                       \n"
"    write_imageui(dst_out, (int2)(x, y), convert_uint_sat(clamp(final_pixel, 0.f, (float)peak) + 0.5f));                                                                                            \n"
"}                                                                                                                                                                                                   \n"
"                                                                                                                                                                                                    \n"
"__kernel void vCheck_float(__read_only image2d_t src, __read_only image2d_t dst_in, __write_only image2d_t dst_out, __global const int* dmap, __global const float* sclip, const int use_sclip,     \n"
"                           const int width, const int height, const int sclip_stride, const int field, const int vcheck,                                                                            \n"
"                           const float vthresh2, const float rcpVthresh0, const float rcpVthresh1, const float rcpVthresh2, const int peak) {                                                       \n"
"    const int x = get_global_id(0);                                                                                                                                                                 \n"
"    const int y_half = get_global_id(1);                                                                                                                                                            \n"
"                                                                                                                                                                                                    \n"
"    const float min_value = (peak == 0) ? -0.5f : 0.0f;                                                                                                                                             \n"
"    const float max_value = (peak == 0) ? 0.5f : 1.0f;                                                                                                                                              \n"
"                                                                                                                                                                                                    \n"
"    if (x >= width || y_half >= height / 2) return;                                                                                                                                                 \n"
"                                                                                                                                                                                                    \n"
"    const int y_other = y_half * 2 + (1 - field);                                                                                                                                                   \n"
"    write_imagef(dst_out, (int2)(x, y_other), clamp(read_imagef(dst_in, sampler, (int2)(x, y_other)).x, min_value, max_value));                                                                     \n"
"                                                                                                                                                                                                    \n"
"    const int y = y_half * 2 + field;                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    if (y < 2 || y >= height - 2) {                                                                                                                                                                 \n"
"        write_imagef(dst_out, (int2)(x, y), clamp(read_imagef(dst_in, sampler, (int2)(x, y)).x, min_value, max_value));                                                                             \n"
"        return;                                                                                                                                                                                     \n"
"    }                                                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    const int dirc = dmap[y * width + x];                                                                                                                                                           \n"
"    if (dirc == 0) {                                                                                                                                                                                \n"
"        write_imagef(dst_out, (int2)(x, y), clamp(read_imagef(dst_in, sampler, (int2)(x, y)).x, min_value, max_value));                                                                             \n"
"        return;                                                                                                                                                                                     \n"
"    }                                                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    const int dirt = dmap[(y - 2) * width + x];                                                                                                                                                     \n"
"    const int dirb = dmap[(y + 2) * width + x];                                                                                                                                                     \n"
"                                                                                                                                                                                                    \n"
"    float dstp_c = read_imagef(dst_in, sampler, (int2)(x, y)).x;                                                                                                                                    \n"
"    float dstp_1p = read_imagef(dst_in, sampler, (int2)(x, y - 1)).x;                                                                                                                               \n"
"    float dstp_1n = read_imagef(dst_in, sampler, (int2)(x, y + 1)).x;                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    float cint;                                                                                                                                                                                     \n"
"    if (use_sclip != 0) {                                                                                                                                                                           \n"
"        cint = sclip[y * (sclip_stride / 4) + x];                                                                                                                                                   \n"
"    } else {                                                                                                                                                                                        \n"
"        const int src_y_center = y + 4;                                                                                                                                                             \n"
"        const int src_x_center = x + 12;                                                                                                                                                            \n"
"        float src_3p = read_imagef(src, sampler, (int2)(src_x_center, src_y_center - 3)).x;                                                                                                         \n"
"        float src_3n = read_imagef(src, sampler, (int2)(src_x_center, src_y_center + 3)).x;                                                                                                         \n"
"        cint = do_cubic_interp(src_3p, dstp_1p, dstp_1n, src_3n);                                                                                                                                   \n"
"    }                                                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    if (max(dirc * dirt, dirc * dirb) < 0 || (dirt == dirb && dirt == 0)) {                                                                                                                         \n"
"        write_imagef(dst_out, (int2)(x, y), clamp(cint, min_value, max_value));                                                                                                                     \n"
"        return;                                                                                                                                                                                     \n"
"    }                                                                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    float dstp_2p_d = read_imagef(dst_in, sampler, (int2)(x + dirc, y - 2)).x;                                                                                                                      \n"
"    float dstp_c_d = read_imagef(dst_in, sampler, (int2)(x - dirc, y)).x;                                                                                                                           \n"
"    float it = do_linear_interp(dstp_2p_d, dstp_c_d);                                                                                                                                               \n"
"                                                                                                                                                                                                    \n"
"    float dstp_c_d2 = read_imagef(dst_in, sampler, (int2)(x + dirc, y)).x;                                                                                                                          \n"
"    float dstp_2n_d = read_imagef(dst_in, sampler, (int2)(x - dirc, y + 2)).x;                                                                                                                      \n"
"    float ib = do_linear_interp(dstp_c_d2, dstp_2n_d);                                                                                                                                              \n"
"                                                                                                                                                                                                    \n"
"    float dstp_1p_d = read_imagef(dst_in, sampler, (int2)(x + dirc, y - 1)).x;                                                                                                                      \n"
"    float dstp_1n_d = read_imagef(dst_in, sampler, (int2)(x - dirc, y + 1)).x;                                                                                                                      \n"
"                                                                                                                                                                                                    \n"
"    float vt = fabs(dstp_2p_d - dstp_1p_d) + fabs(dstp_c_d2 - dstp_1p_d);                                                                                                                           \n"
"    float vb = fabs(dstp_2n_d - dstp_1n_d) + fabs(dstp_c_d - dstp_1n_d);                                                                                                                            \n"
"    float vc = fabs(dstp_c - dstp_1p) + fabs(dstp_c - dstp_1n);                                                                                                                                     \n"
"                                                                                                                                                                                                    \n"
"    float d0 = fabs(it - dstp_1p);                                                                                                                                                                  \n"
"    float d1 = fabs(ib - dstp_1n);                                                                                                                                                                  \n"
"    float d2 = fabs(vt - vc);                                                                                                                                                                       \n"
"    float d3 = fabs(vb - vc);                                                                                                                                                                       \n"
"                                                                                                                                                                                                    \n"
"    float mdiff0 = (vcheck == 1) ? fmin(d0, d1) : (vcheck == 2 ? (d0 + d1) * 0.5f : fmax(d0, d1));                                                                                                  \n"
"    float mdiff1 = (vcheck == 1) ? fmin(d2, d3) : (vcheck == 2 ? (d2 + d3) * 0.5f : fmax(d2, d3));                                                                                                  \n"
"                                                                                                                                                                                                    \n"
"    float a0 = mdiff0 * rcpVthresh0;                                                                                                                                                                \n"
"    float a1 = mdiff1 * rcpVthresh1;                                                                                                                                                                \n"
"    float a2 = fmax((vthresh2 - abs(dirc)) * rcpVthresh2, 0.0f);                                                                                                                                    \n"
"    float a = clamp(fmax(fmax(a0, a1), a2), min_value, max_value);                                                                                                                                  \n"
"                                                                                                                                                                                                    \n"
"    float final_pixel = mix(dstp_c, cint, a);                                                                                                                                                       \n"
"    write_imagef(dst_out, (int2)(x, y), clamp(final_pixel, min_value, max_value));                                                                                                                  \n"
"}                                                                                                                                                                                                     ";
